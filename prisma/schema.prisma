generator client {
  provider      = "prisma-client-rust"
  output        = "../src/infrastructure/prisma_db/db.rs"
  binaryTargets = ["native"]
}

generator erd {
  provider = "prisma-erd-generator"
  output   = "./erd.svg"
}

generator dbml {
  provider   = "prisma-dbml-generator"
  outputName = "dev.dbml"
}

generator docs {
  provider = "node node_modules/prisma-docs-generator"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model AccountP {
  id         String  @id @unique
  owner_name String
  bank_id    String
  number     String
  createdAt  String
  updatedAt  String?

  bank    BankP  @relation(fields: [bankId2], references: [id])
  bankId2 String

  PixKeys      PixKeyP[]
  TransactionP TransactionP[]
  @@map("account")
}

model BankP {
  id        String  @id @unique
  name      String
  code      String
  createdAt String
  updatedAt String?

  Account AccountP[]

  @@map("bank")
}

model PixKeyP {
  id   String @id @default(uuid())
  kind String
  key  String

  createdAt String
  updatedAt String?

  Account    AccountP @relation(fields: [accountPId], references: [id])
  accountPId String
  status     String

  TransactionP TransactionP[]
  @@map("pixkey")
}

model TransactionP {
  id            String   @id
  accountFrom   AccountP @relation(fields: [accountPId], references: [id])
  accountPId    String
  accountFromId String

  amount Float

  pixKeyTo   PixKeyP @relation(fields: [pixKeyPId], references: [id])
  pixKeyPId  String
  pixKeyIdTo String

  status            String
  description       String
  cancelDescription String?

  createdAt String
  updatedAt String?

  @@map("transaction")
}
